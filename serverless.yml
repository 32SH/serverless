service: cloudsystems-serverless
plugins:
  - serverless-offline
  - serverless-step-functions
  - serverless-pseudo-parameters
provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  stage: dev
  environment:
    SENDER_EMAIL: ${env:SENDER_EMAIL}
    CONTACT_EMAIL: ${env:CONTACT_EMAIL}
    AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
    AUTH0_CLIENT_ID: ${env:AUTH0_CLIENT_ID}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ses:*
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - states:StartExecution
        - lambda:*
        - execute-api:*
      Resource: '*'
functions:
  auth:
    handler: handler.auth
  private:
    handler: handler.private
    events:
      - http:
          path: private
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.users}
  sendEmailToAll:
    handler: handler.sendEmailToAll
    events:
      - http:
          path: emails
          method: post
          cors: true
          # TODO: authorizer: ${self:custom.authorizer.users}
    environment:
      SEND_EMAIL_LAMBDA_ARN: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-sendEmail"
      # arn:aws:lambda:eu-west-1:510712368144:function:cloudsystems-serverless-dev-sendEmail
  contactUs:
    handler: handler.contactUs
    events:
      - http:
          path: contact-us
          method: post
          cors: true
  apply:
    handler: handler.apply
    events:
      - http:
          path: apply
          method: post
          cors: true
    environment:
      AFTER_TRAINEE_APPLIES_STATE_MACHINE_ARN: "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:afterTraineeAppliesStateMachine"
  notifyWhenTraineeApplies:
    handler: handler.notifyWhenTraineeApplies
  notifyWhenVotesCalculated:
    handler: handler.notifyWhenVotesCalculated
  vote:
    handler: handler.vote
    events:
      - http:
          path: vote
          method: post
          cors: true
  accept:
    handler: handler.accept
    events:
      - http:
          path: accept
          method: post
          cors: true
  listTrainees:
    handler: handler.listTrainees
    events:
      - http:
          path: trainees
          method: get
          cors: true
          authorizer: auth
  test:
    handler: handler.test
    events:
      - http:
          path: test
          method: get
          cors: true
          # authorizer: auth
  sendEmail:
    handler: handler.sendEmail
    # environment:
    #   SEND_EMAIL_STATE_MACHINE_ARN: "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:sendEmailStateMachine"

stepFunctions:
  stateMachines:
    # sendEmailStateMachine:
    #   name: sendEmailStateMachine
    #   definition:
    #     Comment: A state machine happens when there is a need to send an email.
    #     StartAt: sendEmail
    #     States:
    #       sendEmail:
    #         Type: Task
    #         Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-sendEmail"
    #         End: true
    afterTraineeAppliesStateMachine:
      name: afterTraineeAppliesStateMachine
      definition:
        Comment: A state machine happens after a trainee applies.
        StartAt: notifyWhenTraineeApplies
        States:
          notifyWhenTraineeApplies:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-notifyWhenTraineeApplies"
            Next: waitForPeriodOfTime
          waitForPeriodOfTime:
            Type: Wait
            Seconds: 172800
            Next: notifyWhenVotesCalculated
          notifyWhenVotesCalculated:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-notifyWhenVotesCalculated"
            End: true
  # test:
  #   handler: handler.test
  #   events:
  #     - http:
  #         path: test
  #         method: get
  #         cors: true
resources:
  Resources:
    TraineesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: trainees
    ContributorsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: contributors
custom:
  # stage: ${opt:stage}
  authorizer:
    users:
      name: auth
      type: TOKEN
      identitySource: method.request.header.Authorization
      identityValidationExpression: Bearer (.*)